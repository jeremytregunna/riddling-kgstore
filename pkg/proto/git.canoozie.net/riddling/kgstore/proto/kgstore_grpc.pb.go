// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: kgstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KGStoreService_ExecuteQuery_FullMethodName          = "/kgstore.KGStoreService/ExecuteQuery"
	KGStoreService_ExecuteStreamingQuery_FullMethodName = "/kgstore.KGStoreService/ExecuteStreamingQuery"
	KGStoreService_BeginTransaction_FullMethodName      = "/kgstore.KGStoreService/BeginTransaction"
	KGStoreService_CommitTransaction_FullMethodName     = "/kgstore.KGStoreService/CommitTransaction"
	KGStoreService_RollbackTransaction_FullMethodName   = "/kgstore.KGStoreService/RollbackTransaction"
)

// KGStoreServiceClient is the client API for KGStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KGStoreService provides graph database operations
type KGStoreServiceClient interface {
	// ExecuteQuery executes a query against the database
	ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// ExecuteStreamingQuery executes a query that may return a large result set
	ExecuteStreamingQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error)
	// BeginTransaction starts a new transaction
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// CommitTransaction commits a transaction
	CommitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// RollbackTransaction rolls back a transaction
	RollbackTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type kGStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKGStoreServiceClient(cc grpc.ClientConnInterface) KGStoreServiceClient {
	return &kGStoreServiceClient{cc}
}

func (c *kGStoreServiceClient) ExecuteQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, KGStoreService_ExecuteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kGStoreServiceClient) ExecuteStreamingQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KGStoreService_ServiceDesc.Streams[0], KGStoreService_ExecuteStreamingQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryRequest, QueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KGStoreService_ExecuteStreamingQueryClient = grpc.ServerStreamingClient[QueryResponse]

func (c *kGStoreServiceClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, KGStoreService_BeginTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kGStoreServiceClient) CommitTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, KGStoreService_CommitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kGStoreServiceClient) RollbackTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, KGStoreService_RollbackTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KGStoreServiceServer is the server API for KGStoreService service.
// All implementations must embed UnimplementedKGStoreServiceServer
// for forward compatibility.
//
// KGStoreService provides graph database operations
type KGStoreServiceServer interface {
	// ExecuteQuery executes a query against the database
	ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	// ExecuteStreamingQuery executes a query that may return a large result set
	ExecuteStreamingQuery(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error
	// BeginTransaction starts a new transaction
	BeginTransaction(context.Context, *BeginTransactionRequest) (*TransactionResponse, error)
	// CommitTransaction commits a transaction
	CommitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// RollbackTransaction rolls back a transaction
	RollbackTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedKGStoreServiceServer()
}

// UnimplementedKGStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKGStoreServiceServer struct{}

func (UnimplementedKGStoreServiceServer) ExecuteQuery(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedKGStoreServiceServer) ExecuteStreamingQuery(*QueryRequest, grpc.ServerStreamingServer[QueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStreamingQuery not implemented")
}
func (UnimplementedKGStoreServiceServer) BeginTransaction(context.Context, *BeginTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedKGStoreServiceServer) CommitTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedKGStoreServiceServer) RollbackTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}
func (UnimplementedKGStoreServiceServer) mustEmbedUnimplementedKGStoreServiceServer() {}
func (UnimplementedKGStoreServiceServer) testEmbeddedByValue()                        {}

// UnsafeKGStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KGStoreServiceServer will
// result in compilation errors.
type UnsafeKGStoreServiceServer interface {
	mustEmbedUnimplementedKGStoreServiceServer()
}

func RegisterKGStoreServiceServer(s grpc.ServiceRegistrar, srv KGStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedKGStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KGStoreService_ServiceDesc, srv)
}

func _KGStoreService_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KGStoreServiceServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KGStoreService_ExecuteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KGStoreServiceServer).ExecuteQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KGStoreService_ExecuteStreamingQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KGStoreServiceServer).ExecuteStreamingQuery(m, &grpc.GenericServerStream[QueryRequest, QueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KGStoreService_ExecuteStreamingQueryServer = grpc.ServerStreamingServer[QueryResponse]

func _KGStoreService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KGStoreServiceServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KGStoreService_BeginTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KGStoreServiceServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KGStoreService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KGStoreServiceServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KGStoreService_CommitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KGStoreServiceServer).CommitTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KGStoreService_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KGStoreServiceServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KGStoreService_RollbackTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KGStoreServiceServer).RollbackTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KGStoreService_ServiceDesc is the grpc.ServiceDesc for KGStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KGStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kgstore.KGStoreService",
	HandlerType: (*KGStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _KGStoreService_ExecuteQuery_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _KGStoreService_BeginTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _KGStoreService_CommitTransaction_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _KGStoreService_RollbackTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStreamingQuery",
			Handler:       _KGStoreService_ExecuteStreamingQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kgstore.proto",
}
